# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HMBYeA9OmfqFML3PN7_9qAGRoKxu2ZS8
"""

import modules.py
import dataset.py

def train_func(model, train_loader, lr = 0.0005, GPU_device = True, Epoch = 30):
    optimizer = torch.optim.Adam(model.parameters(), lr)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer,step_size=20,gamma=0.1)
    criterion = nn.CrossEntropyLoss()
    for epoch in range(Epoch):
        train_loss = 0.0
        for batch_idx, data in enumerate(train_loader):
            #print(batch_idx)
            inputs, target = data
            # print(target)

            if use_cuda:
                inputs = inputs.cuda()
                target = target.cuda()
                model.cuda()
                
            optimizer.zero_grad()
            output = model(inputs.float())
            _, predicted = torch.max(output.data, 1)
            # print(predicted)

            loss = criterion(predicted.float(),target.float())
            loss.requires_grad_(True)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()*target.size(0)

        train_loss = train_loss / len(train_loader.dataset)
        print("epoch:",epoch+1, "train_loss:",train_loss)

train_func(ViT(), train_loader, lr = 0.0005, GPU_device = True, Epoch = 30)