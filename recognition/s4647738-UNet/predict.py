# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ub8w-ED4ShqMzyCYV8SuzFWAEzEdJoX6
"""

import matplotlib.pyplot as plt
import tensorflow as tf
import random
from tensorflow.keras import models

!pip install kora -q

from kora import drive
drive.link_nbs()

import dataset
import modules

def plot_predicted_masks(images, masks, number_of_samples):
  """
  Retrieves a specified number of images from validation folder to be input into
  the model are plots the resulting mask compared to its actual mask
  Parameters:
  images, masks: loaded datasets from the validation ISIC folder
  number_of_samples: number of images to be input into the model
  """
  sample = random.sample(range(0, 149), number_of_samples)
  custom_objects = {"ContextModule": modules.ContextModule, "LocalizationModule": modules.LocalizationModule, "SegmentationModule": modules.SegmentationModule}
  model = models.load_model('/content/drive/MyDrive/ISIC/improved_unet.model', custom_objects)
  predicted_masks = model.predict(images)

  mask_plot, axs = plt.subplots(number_of_samples, 3)

  axs[0,0].set_title("Original Image") 
  axs[0,1].set_title("Actual Mask")  
  axs[0,2].set_title("Predicted Mask") 
  for number, i in enumerate(sample):
      # Original
      axs[number, 0].imshow(images[itype: ignore
      # Actual
      axs[number, 1].imshow(tf.argmax(masks[i], axis = 2))  # type: ignore
      # Prediction
      axs[number, 2].imshow(tf.argmax(predicted_masks[i], axis = 2))  

      for a in [0, 1, 2]:
          axs[number, a].set_xticks([])  
          axs[number, a].set_yticks([])  


  mask_plot.savefig('mask.png')
  mask_plot.show()

seg_val_path = '/content/drive/MyDrive/ISIC/ISIC-2017_Validation_Part1_GroundTruth'
val_path = '/content/drive/MyDrive/ISIC/ISIC-2017_Validation_Data'

images, masks = dataset.load_dataset(val_path, seg_val_path)